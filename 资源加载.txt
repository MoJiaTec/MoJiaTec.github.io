资源加载
加载时长、加载速度、加载的资源量
在内存可控的情形下，可以适当提前进行资源加载，即内存中保持一定的冗余加载量。这可以在关卡设计时，就保持在更远的距离进行资源加载。最理想的情况下：保证即使支持的最低硬件配置也能在加载时间内可以加载完所有必须的数据。
加快资源加载速度，资源加载链路可用的优化包括：优化数据存储、IO模型，尽可能减少数据解析和复制的开销、并发执行等。
减少必需资源总量，这一部分可用的优化包括：优化资源重用、减少不必要的资源冗余、资源加载优先级、未加载完成时使用占位资源等等。实际上不管在使用何种方式划分关卡，总存在资源冗余的情况，而如果使用九宫格式的资源加载，其冗余资源占有量和格子大小的成正比。

热区
我们可以优先加载影响玩法的东西和近处的东西，而远处那些不影响玩法的东西可以在加载时做分类策略：

当其是不含显示数据的功能性数据，且其不影响全局的功能状态时，不加载它。
当其包含显示数据但其画面占比贡献小(投影面积小或透明度低等)的时候，不加载它
当其包含显示数据但其画面贡献大的时候，加载它不那么精细的数据。

UE4的Mesh Lod Streaming和Texture Streaming一样是加载[RequiredLodLevel ,MaxLodLevel]的Lod集合，是因为它的流式加载实现机制中没有记录单模型被多引用的情形，所以它无法知道有哪些Lod级别是当前渲染所必须的。


场景实时加载和卸载、加载卡顿
内存：模型、贴图、地块、远景

运行效率
GPU:面数，DrawCall
Cpu:场景管理逻辑

于UE的手游客户端的性能主要由这七大部分构成：
CPU逻辑，CPU渲染，图形API（提交），GPU渲染，内存，带宽，加载时间。

这几个基本元素又会合力衍生出一些新的性能指标，例如功耗（往往同gpu负载和带宽紧密相关）。同时这七部分又构成一个闭合的木桶，最长的一块是主要瓶颈，并且瓶颈可以在这几块转移流动。

首先低帧率和卡顿是两种完全不同的瓶颈类型，虽然归根到底都是某个函数执行的过慢引起的，但是定位和解决方法并不一样。低帧率瓶颈是需要统计一段时间内CPU把更多的时钟耗费在了哪些函数上，或统计一段时间内各个函数占用的cpu时间百分比，找到百分比高的将其优化，就会使帧率得到整体的提高。卡顿则是在一帧的一次运行内某段代码的运行产生了比平均情况明显的长时间，需要定义这段代码的起始点，分别进行计时，然后在连续的统计数据中找到峰值。简单来说帧率瓶颈是统计平均的CPU占用，而卡顿是找峰值。


大世界
场景复杂度
管理:负反馈控制系统

1、明确复杂度的计算
2、指出大世界的特殊性，如何处理特殊性，必然地形、植被
3、设计场景负反馈控制系统，重点指出必要性

game render rhi gpu分别在4个并行的工作线上，有这样几个特点：
game thread最多可以等渲染一帧，也就是说渲染如果第N帧的渲染在第N+1帧的game tick结束时还没有完成，那么渲染就会把game卡住，render 和rhi不会有帧延迟。
game是render和rhi的源驱动者，game的卡顿可能会卡住渲染
render 负责产生drawcall，rhi负责提交drawcall，因此render的卡顿也可能卡住rhi提交。
渲染的最后一步要swapbuffer，即等待gpu完成，所以gpu的卡顿也可能会卡住rhi。
除了gamethread本身，render  rhi 和gpu的工作都是存在间隙的，即game逻辑喂给渲染任务的时机会影响渲染工作的密度，也会影响到渲染的时间，小量多次会浪费渲染效率。


文章构思
ps:为简化我们的算法模型、以及篇幅限制等原因，文中并不会考虑渲染管线、光照、后处理等一些高级渲染话题，因为这些技术的使用，大多都可以根据硬件平台能力和玩家喜好，通过渲染选项进行静态配置。所以文中关于复杂度和控制算法的讨论，都是基于简化后的基础模型特性进行阐述和讨论。

ue多线程渲染框架
game thread 游戏逻辑 渲染数据
renderer thread 排序、剔除、生成渲染命令
rhi thread 提交渲染命令
gpu thread 执行渲染命令

复杂度
mesh 内存 显存 gpu
纹理 带宽
材质 gpu

drawcall 状态切换 cpu gpu
静态合批，动态合批

复杂度控制本质
对象lod
加载、卸载
显示、隐藏
优化dc,在空间和时间取得平衡

其他优化手段诸如gpu driven，本质上是增加剔除的精确性、减少剔除消耗、利用indirect command和vt减少渲染时cpu与gpu的交互损耗以及状态切换损耗

预处理阶段
可见性判断：distance、frustum、pvs、oc

控制调节阶段
LOD: 
	预算分配, bucket计算：社交属性+物理属性+权重分配。
加载、卸载:
显示、隐藏:


