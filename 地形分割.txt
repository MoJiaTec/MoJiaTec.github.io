    我们在此提供的所有方法的基本目标都是一致的：在需要的地方使用更多三角形，不
需要的地方使用较少三角形。本质上，这些方法都只是在离摄像机较近的区域维护更多三
角形，并减少较远区域的三角形数。言下之意就是说较远的地方在屏幕上占用较少的像素
区域，因此减少它们的三角形数不会对其视觉效果有什么影响。当然，对此我们也要考虑
到地形的复杂度，确定在变化并不是很大的区域（平地等等）使用最少的三角形数量，而
在较复杂的区域维持其现状。 

  我们将使用的第一个系统就是实时最优自适应网格（Real-Time Optimal Adapting Me
sh）算法，它的另一个较有名的名称就是ROAM。ROAM 首先出现在 Mark Duchaineau et al
[Duchaineau]写的一篇用来简化大型地形区域渲染的论文中。尽管该文中的这个方法可以
说是革命性的，不过许多游戏程序员发现为了硬件兼容性，还是需要改进下这个方法的。
在我们讨论这个方法的时候，我们将会学习ROAM 背后的基本原理，但是我们的实现会在某
些地方不同于初始的方法。 
  ROAM 基于等腰直角三角形的一个特性。如图7.1 所示，一个直角三角形可以沿着其直
角顶点拉一条垂线垂直斜边而该三角形就被等分成两个相等的直角三角形。这个划分过程
可以被无限次重复，每次分割，三角形数翻倍。由于每个三角形都是下面两个小三角形的
父亲，这就创建了一个二叉树结构。ROAM 是一种分割三角形然后将其折叠它们到其父亲中
的基本管理方法。这使得我们可以在三角形的基础上提高或者降低地形的细节程度。 

每次三角形被分割，它在底线中间创造一个新的顶点。这个顶点的位置可以通过插值
计算底线上两个顶点的均值得到（译者注：就是中点）。但是，这个新顶点由高度网格继承
了其 Z 轴的位置，然后提高或者降低这个值来符合原先地形的数据。我们将把新顶点在Z
轴上移动的量称为替换值（diaplacement ），并以绝对值的形式存储它（可见图 7.2）。 （译
者注：由于这里不太会翻译。这里可能有些看不懂，这个替换值等于中点的高度减去高度
位图上对应点的高度的绝对值，参见roam_section.cpp 里的计算） 

 
  仅有这个值的话,它本身的作用不大；替换值只能告诉我们当三角形分割的时候一个单
独顶点移动了多少位置。为了判断一个三角形是否会被分割，我们需要知道它是否精确的
描述了它覆盖的高度数据。而除了这个高度差值外我们还需要别的一些信息。幸运的是，
当我们向下遍历三角形二叉树时，三角形将越变越小，并且对应的三角形也会覆盖更小的
高度位图区域（译者注：我这里做一下解释，想像一下二维空间中的正多边形，是不是边
越多越趋近于圆；作者这里也是这个意思） 。这也就是说当我们离树叶越近的时候，三角形
面积和高度位图面积的比值越趋近于1：1。因此，如果我们检查所有三角形节点的所有替
换值，我们可以获得一个关于被检查的三角形是否能很好地代表其对应高度位图数据的更
精确描述。 
  我们可以借由递归地遍历所有子节点然后找到介于三角形上顶点和实际高度间的最大
误差值（error delta）来完成这个过程。我们先前已经将这个误差值以替换值（diaplace
ment ）的形式存储在每个三角形中。所以我们当前的任务便是找到最大的替换值然后将其
存储在根三角形内。我们称之为三角形的误差尺度（error metric）。这个数值将用来衡量
指定三角形等于原基本高度数据的多少。若误差尺度为零，那么就是说这个三角形完全符
合高度数据。如果说误差尺度越高，那么就表示对应的的三角形对其覆盖的区域表现较差。 
  我们预先计算出三角形树中的误差尺度，然后与一个基于到摄像机距离的运行时值比
较来决定一个三角形是否需要被分割。因为误差尺度实际上是所有子节点中最大的替换值，
所以我们能确保递归分割这些三角形，直到找到这个最大替换值的所属子三角形。这个误
差尺度的计算方法应该归功于Seumas McNally,是他先使用了这个技术并在LongBow Digit
al Arts 公司的游戏 TreadMarks 上获得了巨大的成功. McNally 对于三角形二叉树和 ROAM
技术的独到见解帮助TreadMarks 荣获了第二届 IGF 的三项大奖。（译者注：可惜他本人英
年早逝，具体可查阅维基）Brian Turner 在他发表于 Gamasutra 的文章“REALTIME DYNAM
IC LOD TERRIAN RENDER WITH ROAM”中详细描述了McNally 的优化技巧[Turner]。这个运
行时值作为一个程序指定值来测试每个三角形的误差尺度。其目的是定义一个测试用的最
大误差标尺。误差尺度小于这个值的三角形将不被分割；反之那些大于这个值的三角形将
被切分。当一个三角形被分割后，继续测试它的两个子三角形。为了顾及到我们的视野依
赖性，当我们远离摄像机时，此最大容忍值将增大。这样就保证了离摄像机近的三角形更
有可能被分割。 

分割决策 
  实际上，我们使用三个值来控制三角形分割：距离(distance)，比例(scale)和限度(l
imit)距离就是介于该点到观察者间的长度。用误差尺度除以距离就得到一个比值。如果这
个比值超过了限度值，那么就执行分割。而额外的比例则可以使得我们放大或缩小误差尺
度来进一步地控制我们选择的细节程度（LOD）。比例值越高那么分割越可能发生。接近0
的小比例值则可以起到相反的作用。最终的计算过程如公式7.1 所示。 

  如公式 7.1 所示，当这个比值超过了我们设置的限度值时，我们必须分割三角形。这
个公式允许我们考虑视野依赖和地形对分割三角形的影响。就是说，离摄像机更近的区域
拥有更大的误差值而更可能被分割，同样岩地和山区同样也更可能被分割。而那些需要较
少三角形的区域，譬如平地，将持有一个很小的误差值—这样就能确保我们不会在这些区
域里浪费额外的三角形。 
  上述说的正是由比例值来做到的，它可以帮助我们权衡距离和地形粗糙度。大比例值
使等式的权重更偏向地势，使得凹凸不平的区域比离摄像机近的区域更有可能被分割。小
比例值则作用相反。而我们需要一些测试来找到对于指定地形最适合的比例和限度。 
  执行三角形分割的时候，我们还需要一个操作来维护整个网格的正确性。观察图 7.3，
当一个三角形被分割，然后生成了一个新的替换顶点，则地形上出现了一条裂缝。这种现
象叫做 T 型接头（T-junction）,而这种现象是所有地形细化方法都需要考虑的一个问题。
为了解决这个问题，我们必须确保当一个三角形被分割的时候，与其共享一条斜边的三角
形也要被分割。 

这就可能在网格上产生一系列连锁反应。当三角形被分割时，它们将强迫它们的相邻
三角形分割。而为了高效地使用三角形二叉树，我们必须确保每个分割或者融合操作也对
其相邻三角形进行更新。每个三角形不仅需要考虑旗下的子节点，也需要考虑与其共享三
条边的三个相邻三角形。这个关系我们在图7.4 画出。

  当三角形被分割的时候，可能出现两种情况。如果是与被分割三角形共享斜边的底边
三角形（如图 7.4 底部的情形），那么它需要被单独再来执行一次分割操作以免出现裂缝。
如果底边三角形没有与被分割三角形共享一条斜边（译者注：就是说被分割三角形的斜边
只是底边三角形的直角边），那么我们就需要先对底边三角形执行递归分割，直到创建出一
个与被分割三角形共享一条斜边的三角形。这个递归过程我们在图7.5 中表示。 